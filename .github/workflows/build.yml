name: Build

on:
  push:
    branches: [ fix/opencv ]

jobs:
  build:
    runs-on: ${{ matrix.OS }}

    strategy:
      matrix:
        name: [ubuntu_18-04_g++5, ubuntu_18-04_g++6, ubuntu_18-04_g++7, ubuntu_18-04_g++8, 
               ubuntu_20-04_g++7, ubuntu_20-04_g++8, ubuntu_20-04_g++9, ubuntu_20-04_g++10]
        include:
        - name: ubuntu_18-04_g++5
          OS: ubuntu-18.04
          COMPILER: g++-5
          COMPILER_NAME: gcc
          COMPILER_VERSION: 5

        - name: ubuntu_18-04_g++6
          OS: ubuntu-18.04
          COMPILER: g++-6
          COMPILER_NAME: gcc
          COMPILER_VERSION: 6

        - name: ubuntu_18-04_g++7
          OS: ubuntu-18.04
          COMPILER: g++-7
          COMPILER_NAME: gcc
          COMPILER_VERSION: 7

        - name: ubuntu_18-04_g++8
          OS: ubuntu-18.04
          COMPILER: g++-8
          COMPILER_NAME: gcc
          COMPILER_VERSION: 8

        - name: ubuntu_20-04_g++7
          OS: ubuntu-20.04
          COMPILER: g++-7
          COMPILER_NAME: gcc
          COMPILER_VERSION: 7

        - name: ubuntu_20-04_g++8
          OS: ubuntu-20.04
          COMPILER: g++-8
          COMPILER_NAME: gcc
          COMPILER_VERSION: 8

        - name: ubuntu_20-04_g++9
          OS: ubuntu-20.04
          COMPILER: g++-9
          COMPILER_NAME: gcc
          COMPILER_VERSION: 9

        - name: ubuntu_20-04_g++10
          OS: ubuntu-20.04
          COMPILER: g++-10
          COMPILER_NAME: gcc
          COMPILER_VERSION: 10

    steps:
      - uses: actions/checkout@v2

      - name: Package
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
              sudo apt-get update
              sudo apt-get --assume-yes install ${{ matrix.COMPILER }}
              sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-${{ matrix.COMPILER_VERSION }} 50
              sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-${{ matrix.COMPILER_VERSION }} 50
              sudo apt install libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev libglu1-mesa-dev python3-setuptools
          elif [ "$RUNNER_OS" == "Windows" ]; then
              echo "$RUNNER_OS not supported"
              exit 1
          else
              brew install ${{ matrix.INSTALL }}
          fi

      - name: Conan
        run: |
          sudo pip3 install conan
          sudo pip3 install --upgrade urllib3
          sudo pip3 install --upgrade jinja2

      - name: Zlib
        run: |
          cd zlib
          conan create -o *:shared=True -s build_type=Debug -s compiler=${{ matrix.COMPILER_NAME }} -s compiler.version=${{ matrix.COMPILER_VERSION }} . 1.2.11@pamplemousseMR/testing
          conan create -o *:shared=True -s build_type=Release -s compiler=${{ matrix.COMPILER_NAME }} -s compiler.version=${{ matrix.COMPILER_VERSION }} . 1.2.11@pamplemousseMR/testing
          conan test -o *:shared=True -s build_type=Debug -s compiler=${{ matrix.COMPILER_NAME }} -s compiler.version=${{ matrix.COMPILER_VERSION }} test_package_0 zlib/1.2.11@pamplemousseMR/testing
          conan test -o *:shared=True -s build_type=Release -s compiler=${{ matrix.COMPILER_NAME }} -s compiler.version=${{ matrix.COMPILER_VERSION }} test_package_0 zlib/1.2.11@pamplemousseMR/testing
          conan create -o *:shared=False -s build_type=Debug -s compiler=${{ matrix.COMPILER_NAME }} -s compiler.version=${{ matrix.COMPILER_VERSION }} . 1.2.11@pamplemousseMR/testing
          conan create -o *:shared=False -s build_type=Release -s compiler=${{ matrix.COMPILER_NAME }} -s compiler.version=${{ matrix.COMPILER_VERSION }} . 1.2.11@pamplemousseMR/testing
          conan test -o *:shared=False -s build_type=Debug -s compiler=${{ matrix.COMPILER_NAME }} -s compiler.version=${{ matrix.COMPILER_VERSION }} test_package_0 zlib/1.2.11@pamplemousseMR/testing
          conan test -o *:shared=False -s build_type=Release -s compiler=${{ matrix.COMPILER_NAME }} -s compiler.version=${{ matrix.COMPILER_VERSION }} test_package_0 zlib/1.2.11@pamplemousseMR/testing


      - name: Opencv1
        run: |
          cd opencv
          conan create -o *:shared=True -s build_type=Debug -s compiler=${{ matrix.COMPILER_NAME }} -s compiler.version=${{ matrix.COMPILER_VERSION }} . 4.5.3@pamplemousseMR/testing

      - name: Opencv2
        run: |
          cd opencv
          conan create -o *:shared=True -s build_type=Release -s compiler=${{ matrix.COMPILER_NAME }} -s compiler.version=${{ matrix.COMPILER_VERSION }} . 4.5.3@pamplemousseMR/testing

      - name: Opencv3
        run: |
          cd opencv
          conan test -o *:shared=True -s build_type=Debug -s compiler=${{ matrix.COMPILER_NAME }} -s compiler.version=${{ matrix.COMPILER_VERSION }} test_package_0 opencv/4.5.3@pamplemousseMR/testing

      - name: Opencv4
        run: |
          cd opencv
          conan test -o *:shared=True -s build_type=Release -s compiler=${{ matrix.COMPILER_NAME }} -s compiler.version=${{ matrix.COMPILER_VERSION }} test_package_0 opencv/4.5.3@pamplemousseMR/testing

      - name: Opencv5
        run: |
          cd opencv
          conan create -o *:shared=False -s build_type=Debug -s compiler=${{ matrix.COMPILER_NAME }} -s compiler.version=${{ matrix.COMPILER_VERSION }} . 4.5.3@pamplemousseMR/testing

      - name: Opencv6
        run: |
          cd opencv
          conan create -o *:shared=False -s build_type=Release -s compiler=${{ matrix.COMPILER_NAME }} -s compiler.version=${{ matrix.COMPILER_VERSION }} . 4.5.3@pamplemousseMR/testing

      - name: Opencv7
        run: |
          cd opencv
          conan test -o *:shared=False -s build_type=Debug -s compiler=${{ matrix.COMPILER_NAME }} -s compiler.version=${{ matrix.COMPILER_VERSION }} test_package_0 opencv/4.5.3@pamplemousseMR/testing

      - name: Opencv8
        run: |
          cd opencv
          conan test -o *:shared=False -s build_type=Release -s compiler=${{ matrix.COMPILER_NAME }} -s compiler.version=${{ matrix.COMPILER_VERSION }} test_package_0 opencv/4.5.3@pamplemousseMR/testing